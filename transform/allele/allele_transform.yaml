
class: sifter

name: snpeff
outdir: ../../output/snpeff

config:
  snpeff:
    type: File
    default: ../../data/vcf/simple_example3.vcf
  schema:
    type: Dir
    default: ../../bmeg-dictionary/gdcdictionary/schemas/

inputs:
  vcfReader:
    tableLoad:
      input: "{{config.snpeff}}"
      sep: "\t"
      columns:
        - chromosome
        - start
        - id
        - ref
        - alt
        - QUAL
        - filter
        - INFO

pipelines:
  variant:
    - from: vcfReader
    - map:
        gpython: |
          def fix(x):
            info = x['INFO']
            info = info.split('|')
            Gene_ID = info[4]
            Transcript_BioType = info[7]
            hgvsc = info[9]
            hgvsp = info[10]
            x['ensembl_gene'] = Gene_ID
            x['biotype'] = Transcript_BioType
            x['hgvsc']=hgvsc
            x['hgvsp'] = hgvsp
            return x
        method: fix
    - project:
        mapping:
          # ensembl_transcript: "{{row.Transcript_ID}}"
          # ensembl_protein: "{{row.ENSP}}"
          genome: "PLACEHOLDER"
    #
    # - fieldType:
    #     t_depth: int
    #     t_ref_count: int
    #     t_alt_count: int
    #     n_depth: int
    #     n_ref_count: int
    #     n_alt_count: int
    #     start: int
    #
    # - project:
    #     mapping:
    #       allele_id: "{{row.#CHROM}}:{{row.POS}}:{{row.REF}}:{{row.ALT}}"
    #       # allele_id: "{{row.genome}}:{{row.chromosome}}:{{row.start}}:{{row.ref}}:{{row.alt}}"
    # - hash:
    #     field: gid
    #     method: sha1
    #     value: "{{row.allele_id}}"
    # - project:
    #     mapping:
    #       gid: "Allele:{{row.gid}}"
    - emit:
        name: allele
